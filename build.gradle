import static org.apache.tools.ant.taskdefs.condition.Os.*

apply plugin: 'java'

group 'io.leonis'
version '0.0.1'
archivesBaseName = "subra-examples"
rootProject.description = 'Reference implementation for several subra applications'
sourceCompatibility = 1.8
targetCompatibility = 1.8

if (!isFamily(FAMILY_WINDOWS) && !isFamily(FAMILY_MAC) && !isFamily(FAMILY_UNIX))
    throw new GradleException("Unsupported operating system!")

repositories {
    mavenCentral()
    // for jamepad
    maven { url "https://jitpack.io" }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

dependencies {
    // delta-leonis
    compile 'io.leonis:subra-protocol:0.0.1'
    compile 'io.leonis:subra:0.0.4'
    compile 'io.leonis:zosma:0.0.6'
    compile 'io.leonis:torch:0.0.1'

    // math
    compile 'org.nd4j:nd4j-native:0.8.0'
    if (isFamily(FAMILY_WINDOWS))
      compile 'org.nd4j:nd4j-native:0.8.0:windows-x86_64'
    else if (isFamily(FAMILY_MAC))
      compile 'org.nd4j:nd4j-native:0.8.0:macosx-x86_64'
    else if (isFamily(FAMILY_UNIX))
      compile 'org.nd4j:nd4j-native:0.8.0:linux-x86_64'

    // rx
    compile 'io.projectreactor:reactor-core:3.1.1.RELEASE'

    // controller
    compile 'com.github.WilliamAHartman:Jamepad:1.2'

    // java impl
    compile 'org.projectlombok:lombok:1.16.20'

    // ui
    compile 'com.googlecode.lanterna:lanterna:3.0.0'
}

tasks.withType(Javadoc) {
    ext.capturedOutput = []
    def listener = { ext.capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)
    options.addStringOption('Xdoclint:all', '-quiet')

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        ext.capturedOutput.join('').with { output ->
            if (output =~ /warning/) {
                throw new RuntimeException("Javadoc warning found: \n" + output)
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar
}
